


Aim:-
*****
	Linux commands for redirection, pipes, filters, job control, file ownerships, file permissions, links and system file hierarchy .

Redirection Of Standard Output/input:-
***************************************

	
	# 	By default most command line programs send their output to the standard output which by default displays it on the screen

	
	>>		 <command_name> > <filename> ==> Overwrites the file <file_name> with the output of the command
	Example:- ls > file.txt ==> Overwrites the contents in file.txt with the output of the command ls

	
	>> 		<command_name> >> <filename> ==> Appends the output of the command to the file filename
	Example:- ls >> file.txt ==> Appends the output of the command ls to the file with the filename file.txt

	
	# 	Most of the command line programms accept its input from the standard input and the standard input by default gets its contents from the keyboard. Similar to standard ouput it can be redirected.

	
	>> 		sort < <filename> ==> Sort command processes the contents of the file with the name <filename>

	
	>>		sort < <file1> > <file2> ==> Processes the contents of file 1 and redirects its output to file 2

Pipes:-
*******

	
	#	Pipes are used to redirect the standard output of one command to the standard inout of another command

	
	>> 		<command1> | <command2> ==> The standard output of command 1 is redirected to the standard input of command 2
	Example:- ls -lt | head ==> Displays the 10 newest files in the current directory
			  du | sort *nr ==> Displays a list of directories, the amount of space they consume, sorted from the largest to the smallest in the amount of memory each directory occupies

Filters:-
**********

	#	Filters take standard input and perform an operation upon it and sends the results to the standard output. In this way, they can be used to process information in powerful ways

	
	* 		sort --> Sorts the standard input and sends the sorted ouput to the standard output
	Example :- sort <filename> ==> Rearranges each line of the file in alphabetical order and outputs it to the standard output

	
	* 		uniq --> Given a sorted stream of data from the standard input, it removes the duplicate lines of data and returns it to the standard output
	Example:- uniq <filename> ==> Removes the duplicate lines of text from the filename and outputs it to the standard output
	 
	
	* 		grep --> Examines each line of data it recieves from the standard input and output every line that contains a certain specified pattern of characters
	Example:- grep "string" <filename> ==> Examines each line of the file and outputs every line of the file containing the input string to the standard output

	
	* 		fmt --> Reads text from standard input and outputs the formatted text to the standard output
	Example:- fmt <filename> ==> Formats the contents of the file and outputs it to the standard output

	
	* 		pr --> Takes data from the standard input and splits the data into pages with page breaks, footers and headers in preparation for printing
	Example:- pr <filename> ==> Displays the contents of the file one page after the other and returns the output to the standard output

	
	* 		head --> Outputs the first few lines of the file and returns it to the standard output
	Example:- head <filename> ==> Displays the first ten lines of the file

	
	* 		tail --> Outputs the last few lines of the file and returns it to the standard output
	Example:- last <filename> ==> Displays the last ten lines of the file

	
	* 		tr --> Translates Characters. Can be used to perfrom tasks such as uppercase to lowercase conversions or changing the line termination characters from one type to another
	Example:- tr [:lower:] [:upper:] ==> Takes input from the keyboard and outputs each character of the input to uppercase characters and outputs it to the standard output

Job Control:-
**************

	#	There are several commands used to control processes in Linux

	* 		ps --> List the processes running in the system. ps is a external command which tells you about the processes running on the system
	Example:- ps ==> Lists all the processes running on the system 
		  ps aux ==> Lists all the processes (a= show process for all the users, u=display the process's user/owner, x= also show the 		  processes not attached to the terminal)

	*		 kill --> Sends a signal to the processes specified (usually used to stop the execution of a process)
	Example:- kill -l ==> List the signal names that can be sent to the processes in linux
		  kill <PID> ==> To kill the process specified by the process ID <PID>. To obtain the process id of a certain process use the ps 		  command.
		  kill -s SIGKILL <PID> ==> Used to send the SIGKILL signal to the process with the process id PID. This command is used to forcefully 		  kill a process without any memory cleanup. 
	
	# 	A signal is an asynchronous notification sent to a process or to a specific thread within the same process in order to notify it of an event that occurred.
	
	*	 jobs --> An alternate way of listing the processes. jobs is a shell builtin command which gives you information internal to the shell such as the job numbers
	Example:- jobs ==> Lists the jobs that the current shell is managing
	
	* 	bg --> Used to put a process in the background
	
	*	 fg --> Used to put a process in the foreground


Permissions
***********

	1 )chmod - modify file access rights
    2 )su - temporarily become the superuser
    3 )chown - change file ownership
    4 )chgrp - change a file's group ownership

		example:
			rwx rwx rwx = 111 111 111
			rw- rw- rw- = 110 110 110
			rwx --- --- = 111 000 000

			and so on...

			rwx = 111 in binary = 7
			rw- = 110 in binary = 6
			r-x = 101 in binary = 5
			r-- = 100 in binary = 4   

	5 )[me@linuxbox me]$ su
	   Password:
	   [root@linuxbox me]#

What Is A Link?
***************

	A link provides a connection between files. This provides the ability to have a single file or directory referred to through different names.

	The nearest comparison with the Windows world is of a shortcut, but that is an unfair comparison as a link in Linux is far more powerful. A Windows shortcut is just a way of launching a file from a different place, whereas a link can make a file appear in multiple locations which is invisible to the applications.

	There are two types of links that can be created. The first is a hard link and the other is a soft link (sometimes called symbolic link or symlink). The command to create these is the same - ln.


Hard Link
**********

	A hard link creates a second file that refers to the same file on the physical disk. This is achieved by having two filenames that point directly at the same file. This is normally used where file entries (links) are on the same filesystem. When a hard link is created then all the names that link to that file are given the same status. Deleting one of the files will break the link, but the file can still exist under the other linked filenames. This works by maintaining a counter of the number of filenames that the file has. When the number of filenames reaches zero then the file is considered to be deleted and is removed.

	The number of filenames for a file can be seen using the ls -l command. The number following the file permissions indicates the number of linked filenames. The following screenshot shows that filename1 and filename2 are to linked files with one of the file denoted by the 2 (in this case the same file, but they could be to completely different files), the file not_link is a single file denoted by the 1.

	$ ls -l

	total 2432

	-rw-r--r-- 2 stewart stewart 1241088 2009-01-23 15:26 filename1

	-rw-r--r-- 2 stewart stewart 1241088 2009-01-23 15:26 filename2

	-rw-r--r-- 1 stewart stewart       0 2009-01-23 15:26 not_link

	Note that whilst the two files appear to occupy 1.2Mb each the actual space used is only 1.2Mb in total as the file only exists once.

	du -h

	1.2M

	The default for the ln command is a hard link. Assuming filename1 already exists filename2 is created using:

	ln filename1 filename2

Soft Link
**********

	A soft link is sometimes referred to as a symbolic link or symlink. A filename created as a soft link is a special file that has the pathname of the file to redirect to. Behind the scenes when you try and access a symlink it just goes to the filename referred to instead.

	In the following example a file has been created called original_file with a soft link to that same file called softlink_tofile. As you can see the ls command makes it clear that this is a link through the l at the beginning of the file permissions and due to the reference notation after the filename.

	ls -l

	total 440

	-rw-r--r-- 1 stewart stewart 446464 2009-01-23 15:21 original_file

	lrwxrwxrwx 1 stewart stewart     13 2009-01-23 15:20 softlink_tofile -> original_file

	Note that with a soft link the permissions to the link file are set to full access as the user is contstrained by the permissions on the original file. Also note that if the filesize of the original file changes the link will remain the same (on this system 13 bytes).

	If the link is deleted then this will have no impact on the original file, but if the original file is deleted this will result in a broken link. The example below shows how removing the original file results in a error "No such file or directory".

	$ rm original_file 



	$ ls -l

	total 0

	lrwxrwxrwx 1 stewart stewart 13 2009-01-23 15:20 softlink_tofile -> original_file



	$ cat softlink_tofile 

	cat: softlink_tofile: No such file or directory

	The -s option is used on the ln command to create a softlink.

	ln -s original_file softlink_tofile

	Note that if original_file does not exist then the soft link will be created anyway. An attempt to read it will give the error message we encountered earlier, but an attempt to write to the file can create original_file.

Pitfalls To Using Links
************************

	There are some things that you need to be aware of, particularly when using softlinks.

	    Some programs (e.g. Apache) can be configured to not follow soft links (from a security perspective)
	    When creating backup files you need to be aware of how the particular backup program / tool works
	        Using one method the program may not backup the file referenced resulting in an incomplete backup of the files
	        Using another method the program may end up backing up both as individual files using double the space for that space
	    Using the second method of the above could result in the file being restored as a real file rather than as a link, breaking their connection
	    The original file could be deleted without realising that there are other symlinked files referring to it

	Despite these pitfalls there are many advantages to using both hard and soft links to provide multiple references to files.
				

